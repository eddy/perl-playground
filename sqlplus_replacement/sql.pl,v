head	1.12;
access;
symbols;
locks
	et6339:1.12; strict;
comment	@# @;


1.12
date	2008.10.29.05.40.47;	author et6339;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.14.01.39.21;	author et6339;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.13.05.04.38;	author et6339;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.13.05.00.49;	author et6339;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.13.03.42.05;	author et6339;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.13.02.15.54;	author et6339;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.09.06.20.26;	author bd6338;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.06.20.42.50;	author bd6338;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.07.02.54.09;	author bd6338;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.07.02.42.36;	author bd6338;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.07.02.39.39;	author bd6338;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.07.02.32.07;	author bd6338;	state Exp;
branches;
next	;


desc
@sqlplus sucks, this makes life easier
@


1.12
log
@Text::Table -> properly display title and its line separation from body
@
text
@#!/usr/bin/perl

# $Id: sql.pl,v 1.11 2008/10/14 01:39:21 et6339 Exp et6339 $
# $Revision: 1.11 $
# $Date: 2008/10/14 01:39:21 $

use strict;
use warnings;

######################################################################
# Modules
#

use DBI;
use Sys::Hostname;
use Getopt::Long;
use Hash::Util qw(lock_keys);

BEGIN {
    use FindBin;
    use lib "$FindBin::Bin";
    use Text::Table;
}

######################################################################
# Command line options
#

# Parameter variables + defaults
my $user      = 'clink';
my $password  = 'clink07';
my $dbname    = hostname() =~ /vcmsp/ ? 'clink'
                                      : 'clinkt';
my $helpflag  = 0;
my $tableflag = 0;

GetOptions ( 'user=s'     => \$user,
             'password=s' => \$password,
             'dbname=s'   => \$dbname,
             'table'      => \$tableflag,
             'help'       => \$helpflag,
           ) or die usage();

if ( $helpflag ) { print usage() . "\n"; exit; }

######################################################################
# Database connection
#

my $dbh;
$dbh = DBI->connect("dbi:Oracle:${dbname}", $user, $password,
                    { RaiseError => 1, PrintError => 0, AutoCommit => 0 });

######################################################################
# Configuration and global variables
#

my @@cmd_history   = (); # Command history
my $cmd_buffer    = q{}; # Start with empty buffer
my $history_file  = "$ENV{HOME}/.sqlbrad-history";

my $save_history = 0; # Flag determining if history is to be saved

######################################################################
# Main program
#

# Populate command history
_retrieve_history();

# Main loop
_print_help_line();
while (<>) {
  chomp;

  # React to special commands or append to command buffer
    uc($_) eq 'Q'     ? last
  : uc($_) eq 'TAB'   ? _handle_table_toggle($_)
  : uc($_) eq 'DNS'   ? _handle_history_toggle($_)
  : uc($_) eq 'S'     ? _handle_history_toggle($_)
  : uc($_) eq 'H'     ? _handle_history()
  : $_ =~ /^R(\d*)$/i ? _handle_repeat($1)
                      : _handle_append_cmd($_);
                
  # Execute if the buffered command is done
  if ( $cmd_buffer =~ /;$/ ) {
    _execute();
    _print_help_line();
  }
}

# Update command history
_store_history();

# Roll-back anything that hasn't been committed
$dbh->rollback();

# Disconnect from database
$dbh->disconnect();

######################################################################
# Subroutines
#

sub usage {
  return "$0 [--user=<username>] [--password=<password>] [--dbname=<dbname>]";
}

sub _print_help_line {
  print "\n"
      . ">>> Q : Quit ...                              [Logged in as ${user}\@@${dbname}]\n"
      . ">>> DNS: Stop saving history ... S: Start saving history (Currently: "
      . ( $save_history ? "ON" : "OFF" )
      . ")\n"
      . ">>> TAB: Use nice table layout ... (Currently: "
      . ( $tableflag ? "ON" : "OFF" )
      . ")\n"
      . ">>> H: Show history ... Rn: Repeat history item n\n"
      ;
}

sub _handle_history_toggle {
  my ($command) = @@_;

  if ( uc($command) eq 'DNS' ) {
    print "History saving is now turned OFF\n";
    $save_history = 0;
  }
  elsif ( uc($command) eq 'S' ) {
    print "History saving is now turned ON\n";
    $save_history = 1;
  }
}

sub _handle_history {
  $cmd_buffer = q{}; # Clear the command buffer

  print "History:\n";
  my $index = 0;
  print " [" . $index++ . "] $_\n" for @@cmd_history;
}

sub _handle_repeat {
  my ($repeat_index) = @@_;

  # Default is zero
  $repeat_index = 0 unless $repeat_index;

  if ( exists $cmd_history[$repeat_index] ) {
    $cmd_buffer = $cmd_history[$repeat_index] . ';';
    print "Repeat: $cmd_buffer\n";
  }
  else {
    print "REPEAT INDEX $repeat_index DOES NOT EXIST\n";
  }
}

sub _handle_append_cmd {
  # Strip pre/post whitespace
  $_ =~ s/^\s*//;
  $_ =~ s/\s*$//;

  # Append command buffer
  $cmd_buffer .= " $_";

  # Strip pre/post whitespace again
  $cmd_buffer =~ s/^\s*//;
  $cmd_buffer =~ s/\s*$//;
}

sub _handle_table_toggle {
  my ($command) = @@_;

  if ( uc($command) eq 'TAB' ) {
      $tableflag = ( $tableflag == 0 ) ? 1 : 0;

      print "Table layout is now turned "
            . ( $tableflag == 0 ? "OFF" : "ON" )
            . "\n";
  }

  return;
}

sub _retrieve_history {
  if ( -f $history_file ) {
    open my $history_fh, "<", $history_file || die($!);
    @@cmd_history = <$history_fh>;
    chomp($_) for @@cmd_history;
    close $history_fh;
  }
}

sub _store_history {
  open my $history_fh, ">", $history_file || die($!);
  print $history_fh "$_\n" for @@cmd_history;
  close $history_fh;
}

sub _execute {
  chop $cmd_buffer; # Remove the trailing ;
  my $sth;

  eval {
    $sth = $dbh->prepare($cmd_buffer);
    $sth->execute();
  };
  if ( $@@ ) {
    warn $@@;
    $cmd_buffer = q{}; # Clear the command buffer
    return;
  }

  my %table_content = ( 'title' => undef,
                        'body'  => undef,
                        'rows'  => 0,
                      );
  lock_keys(%table_content); # Avoid typo...
                      
  # Build our table...
  $table_content{'title'} = join( ' | ', @@{$sth->{NAME}} );

  if ( $cmd_buffer =~ /^select/i ) {
      while ( my $row = $sth->fetchrow_arrayref() ) {
          my @@null_to_string_row = map { defined $_ ? $_ : '[NULL]' } @@{$row};
          my $null_to_string_row = join(' | ',     @@null_to_string_row);
          
          $table_content{'body'} .= $null_to_string_row . "\n";
      }
  }

  # Number of rows affected...
  $table_content{'rows'} = $sth->rows();
  
  # Display the result...
  _display_result(\%table_content);
  
  # Store command in history (if history is being saved and it is different)
  if ( $save_history && $cmd_history[0] ne $cmd_buffer ) {
    unshift @@cmd_history, $cmd_buffer; 
  }

  $cmd_buffer = q{}; # Clear the command buffer
}

sub _display_result {
    my ($table_ref) = @@_;
    
    # empty line after the sql command...
    print "\n";
    
    # display rows if it's a select...
    if ( $cmd_buffer =~ /^select/i ) {
        if ($tableflag) {
            # generate Text::Table object...
            my @@column_names  = split /(\|)/, $table_ref->{'title'};
            my $tb            = Text::Table->new( @@column_names );
            
            if ( $table_ref->{'rows'} > 0 ) {
                foreach my $row ( split /\n/, $table_ref->{'body'} ) {
                    my @@null_to_string_row  = split /(\|)/, $row;
                    $tb->load(\@@null_to_string_row);
                }
            }

            my $row   = 1;
            my @@lines = $tb->table;
            for my $line (@@lines) {
                print $line;
                print '-'x$tb->width . "\n" if $row++ == 1;
            }
        }
        else {
            # normal print (not Table::Text)...
            print "$table_ref->{'title'}\n";
            print '-'x(length($table_ref->{'title'})) . "\n";
            print $table_ref->{'body'} if $table_ref->{'rows'} > 0;
        }
        
        print "\nRows returned: " . $table_ref->{'rows'} . "\n";
    }
    else {
        print "\nRows affected: " . $table_ref->{'rows'} . "\n";
    }

    # Display last command executed...
    print "SQL: ${cmd_buffer}\n";

    return;
}
@


1.11
log
@More presentation separation from execution
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.10 2008/10/13 05:04:38 et6339 Exp et6339 $
# $Revision: 1.10 $
# $Date: 2008/10/13 05:04:38 $
d249 3
a258 3
            print $tb->title;
            print '-'x($tb->width) . "\n";

d264 7
a270 1
                print $tb->body;
@


1.10
log
@Fixed minor bug: don't try to display the body if the number of rows is 0 (zero)
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.9 2008/10/13 05:00:49 et6339 Exp et6339 $
# $Revision: 1.9 $
# $Date: 2008/10/13 05:00:49 $
a221 2
  my @@column_names        = split /( \| )/, $table_content{'title'};
  my $tb                  = Text::Table->new( @@column_names );
a226 1
          @@null_to_string_row    = split /( \| )/, $null_to_string_row;
d228 1
a228 4
          $tableflag 
              ? $tb->load(\@@null_to_string_row) 
              : $table_content{'body'} .= $null_to_string_row . "\n"
              ;
d236 1
a236 1
  _display_result($tb, \%table_content);
d247 3
a249 3
    my ($table_obj, $table_ref) = @@_;

    # Select or update statement...
d251 21
a271 8
        # print table title...
        print ( $tableflag ? $table_obj->title : "$table_ref->{'title'}\n" );
        print '-'x($table_obj->width) . "\n";

        # print table body...
        if ( $table_ref->{'rows'} > 0 ) {
            print ( $tableflag ? $table_obj->body : $table_ref->{'body'} );
            print '-'x($table_obj->width) . "\n";
d273 2
a274 1
        print 'Rows returned: ' . $table_ref->{'rows'} . "\n";
d277 1
a277 1
        print 'Rows affected: ' . $table_ref->{'rows'} . "\n";
@


1.9
log
@Separate presentation from the execution.
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.8 2008/10/13 03:42:05 et6339 Exp et6339 $
# $Revision: 1.8 $
# $Date: 2008/10/13 03:42:05 $
d262 4
a265 2
        print ( $tableflag ? $table_obj->body : $table_ref->{'body'} );
        print '-'x($table_obj->width) . "\n";
@


1.8
log
@Handle nice table layout on and off
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.7 2008/10/13 02:15:54 et6339 Exp et6339 $
# $Revision: 1.7 $
# $Date: 2008/10/13 02:15:54 $
d17 1
d203 1
d214 11
d226 18
a243 30
    # select called so display results
    my $column_names = join(' | ', @@{$sth->{NAME}});
    my @@column_names = split /( \| )/, $column_names;
    my $tb = Text::Table->new( @@column_names );

    $tableflag ? print $tb->title
               : print "$column_names\n";
    print '-'x($tb->width) . "\n";

    while ( my $row = $sth->fetchrow_arrayref() ) {
      my @@null_to_string_row = map { defined $_ ? $_ : '[NULL]' } @@{$row};
      my $null_to_string_row = join(' | ', @@null_to_string_row);
      @@null_to_string_row    = split /( \| )/, $null_to_string_row;
      $tableflag ? $tb->load(\@@null_to_string_row) 
                 : print $null_to_string_row . "\n";
    }

    if ( $tableflag ) {
        print $tb->body;
    }

    print '-'x($tb->width) . "\n";
    print 'Rows returned: ' . $sth->rows() . "\n";
  }
  else {
    print 'Rows affected: ' . $sth->rows() . "\n";
  }

  print "SQL: ${cmd_buffer}\n";

d251 24
@


1.7
log
@* Column separator is now "|" instead of ":"
* Added parameter to use Text::Table for good layout table
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.6 2007/07/09 06:20:26 bd6338 Exp bd6338 $
# $Revision: 1.6 $
# $Date: 2007/07/09 06:20:26 $
d77 1
d114 3
d170 14
d218 4
a221 3
    $tableflag ? print $tb->title . '-'x($tb->width) . "\n"
               : print $column_names . "\n" . '-'x(length($column_names)) . "\n";
   
@


1.6
log
@Added command line options
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.5 2007/06/06 20:42:50 bd6338 Exp bd6338 $
# $Revision: 1.5 $
# $Date: 2007/06/06 20:42:50 $
d18 6
d34 1
d39 1
d196 7
a202 2
    my $column_names = join(' : ', @@{$sth->{NAME}});
    print $column_names . "\n" . '-'x(length($column_names)) . "\n";
d205 4
a208 1
      print join(' : ', @@null_to_string_row) . "\n";
d210 6
a215 1
    print '-'x(length($column_names)) . "\n";
@


1.5
log
@Corrected the 'turn on save history'
commansd to be in line with inline help
Added a current save history flag indicator
Added a last sql executed line to the output
Changed initial state of save-history flag to be off
@
text
@d3 3
a5 3
# $Id: sql.pl,v 1.1 2007/05/07 22:56:18 bd6338 Exp bd6338 $
# $Revision: 1.1 $
# $Date: 2007/05/07 22:56:18 $
d16 20
d42 2
a43 9
if (hostname() =~ /vcmsp/) {
  $dbh = DBI->connect('dbi:Oracle:clink', 'clink', 'clink07',
                      { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
}
else {
  $dbh = DBI->connect('dbi:Oracle:clinkt', 'clink', 'clink07',
                      { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
}

d95 4
d101 1
a101 1
      . ">>> Q : Quit ... \n"
@


1.4
log
@Added keywords for RCS/CVS substitution
@
text
@d3 3
a5 3
# $Id: send2stars.pl,v 1.1.2.1 2007/04/15 21:40:39 et6339 Exp $
# $Revision: 1.1.2.1 $
# $Date: 2007/04/15 21:40:39 $
d40 1
a40 1
my $save_history = 1; # Flag determining if history is to be saved
d85 3
a87 1
      . ">>> DNS: Stop saving history ... S: Start saving history \n"
d99 1
a99 1
  elsif ( uc($command) eq 'SH' ) {
d184 2
@


1.3
log
@Corrected help line (save history is just S, not SH)
@
text
@d3 4
@


1.2
log
@Moved prepare into eval to avoid dying on invalid sql syntax
;
@
text
@d81 1
a81 1
      . ">>> DNS: Stop saving history ... SH: Start saving history \n"
@


1.1
log
@Initial revision
@
text
@d152 1
a152 1
  my $sth = $dbh->prepare($cmd_buffer);
d154 1
@
